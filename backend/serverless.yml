service:
  name: grg-serverless-todo-app

custom:
  dynamodb:
    stages:
      - test
      - dev
    start:
      port: 8888
      inMemory: true
      migrate: true
  
  serverless-offline:
    httpPort: 3333

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    INDEX_NAME: userIdAndTodoIdIndex
    LOCAL_DATABASE_PORT: 8888
    LOCAL_DATABASE_ENDPOINT: http://localhost

package:
  individually: true

functions:
  CreateTodos:
    handler: src/lambda/http/createTodo.handler
    events:
      -
        http:
          method: post
          path: todos
    iamRoleStatements:
      -
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        Effect: Allow
        Action:
          - dynamodb:PutItem
  RetrieveTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      -
        http:
          method: get
          path: todos
    iamRoleStatements:
      -
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        Effect: Allow
        Action:
          - dynamodb:Query
  UpdateTodos:
    handler: src/lambda/http/updateTodo.handler
    events:
      -
        http:
          method: patch
          path: todos/{todoId}
    iamRoleStatements:
      -
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      -
        http:
          method: delete
          path: todos/{todoId}
    iamRoleStatements:
      -
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem

resources:
  Resources:
    ServerlessTodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
          -
            AttributeName: todoId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - 
                AttributeName: userId
                KeyType: HASH
              - 
                AttributeName: todoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL